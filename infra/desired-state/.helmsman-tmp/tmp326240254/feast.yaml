# Feast deployment installs the following components:
# - Feast Core
# - Feast Serving Online
# - Feast Serving Batch
# - Prometheus StatsD Exporter
#
# The configuration for different components can be referenced from:
# - charts/feast-core/values.yaml
# - charts/feast-serving/values.yaml
# - charts/prometheus-statsd-exporter/values.yaml
#
# Note that "feast-serving-online" and "feast-serving-batch" are
# aliases to "feast-serving" chart since in typical scenario two instances
# of Feast Serving: online and batch will be deployed. Both described
# using the same chart "feast-serving".
#
# Note that the import job by default uses DirectRunner
# https://beam.apache.org/documentation/runners/direct/
# in this configuration since it allows Feast to run in more environments
# (unlike DataflowRunner which requires Google Cloud services).
#
# A secret containing Google Cloud service account JSON key is required
# in this configuration.
# https://cloud.google.com/iam/docs/creating-managing-service-accounts
#
# The Google Cloud service account must have the following roles:
# - bigquery.dataEditor
# - bigquery.jobUser
#
# Assuming a service account JSON key file has been downloaded to
# (please name the file key.json):
# /home/user/key.json
#
# Run the following command to create the secret in your Kubernetes cluster:
#
# kubectl create secret generic feast-gcp-service-account \
#   --from-file=/home/user/key.json
#
# ============================================================
# Feast Core
# ============================================================
kafka:
  enabled: false
postgresql:
  enabled: true

feast-core:
  # If enabled specifies whether to install Feast Core component.
  #
  # Normally, this is set to "false" when Feast users need access to low latency
  # Feast Serving, by deploying multiple instances of Feast Serving closest
  # to the client. These instances of Feast Serving however can still use
  # the same shared Feast Core.
  enabled: true
  # Specify which image tag to use. Keep this consistent for all components
  image:
    tag: "0.4.4"
  # jvmOptions are options that will be passed to the Java Virtual Machine (JVM)
  # running Feast Core.
  #
  # resources that should be allocated to Feast Core.
  resources:
    limits:
      cpu: 2
      memory: 2G
    requests:
      cpu: 100m
      memory: 500Mi
  gcpProjectId: dev-konnekt-data-deep-1
  # gcpServiceAccount is the Google service account that Feast Core will use.
  gcpServiceAccount:
    # useExistingSecret specifies Feast to use an existing secret containing
    # Google Cloud service account JSON key file.
    #
    # This is the only supported option for now to use a service account JSON.
    # Feast admin is expected to create this secret before deploying Feast.
    useExistingSecret: true
    existingSecret:
      # name is the secret name of the existing secret for the service account.
      name: feast-gcp-service-account
      # key is the secret key of the existing secret for the service account.
      # key is normally derived from the file name of the JSON key file.
      key: dev-konnekt-data-deep-1_feast-server-azure-cluster.json
  # Setting service.type to NodePort exposes feast-core service at a static port
  service:
    type: ClusterIP
    http:
      nodePort: false
    grpc:
      nodePort: false
  # Make kafka externally accessible using NodePort
  kafka:
    enabled:
      false
  postgresql:
    enabled: true
  application.yaml:
    feast:
      stream:
        options:
          # Point to one of your Kafka brokers
          bootstrapServers: feast-kafka:9092
# ============================================================
# Feast Serving Online
# ============================================================
feast-serving-online:
  enabled: false
# ============================================================
# Feast Serving Batch
# ============================================================
feast-serving-batch:
  enabled: true
  redis:
    enabled: false
  image:
    tag: "0.4.4"
  service:
    type: ClusterIP
    http:
      nodePort: false
    grpc:
      nodePort: false
  ingress:
    http:
      enabled: false
    grpc:
      enabled: false
  resources:
    limits:
      cpu: 1
      memory: 2G
    requests:
      cpu: 50m
      memory: 256M
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  gcpServiceAccount:
    useExistingSecret: true
    existingSecret:
      name: feast-gcp-service-account
      key: dev-konnekt-data-deep-1_feast-server-azure-cluster.json
  gcpProjectId: dev-konnekt-data-deep-1
  logLevel: info
  application.yaml:
    feast:
      jobs:
        staging-location: gs://dev-konnekt-data-deep-1-dataflow-workspace/batch-staging/
        bigquery-initial-retry-delay-secs: 1
        bigquery-total-timeout-secs: 21600
        store-type: REDIS
        store-options:
          host: feast-redis-jobstore-master
          port: 6379
  store.yaml:
    name: bigquery
    type: BIGQUERY
    bigquery_config:
      project_id: dev-konnekt-data-deep-1
      dataset_id: feast_warehouse
    subscriptions:
      - name: "*"
        project: "*"
        version: "*"
